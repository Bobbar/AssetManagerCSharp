<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AssetManager</name>
    </assembly>
    <members>
        <member name="T:AssetManager.Data.Classes.MappableObject">
            <summary>
            Data mapper for classes tagged with <see cref="T:AssetManager.Data.Classes.DataColumnNameAttribute"/>
            </summary>
        </member>
        <member name="P:AssetManager.Data.Classes.MappableObject.PopulatingTable">
            <summary>
            DataTable that was used to populate this object.
            </summary>
        </member>
        <member name="P:AssetManager.Data.Classes.MappableObject.TableName">
            <summary>
            Database Tablename for implementing object.
            </summary>
        </member>
        <member name="M:AssetManager.Data.Classes.MappableObject.MapProperty(System.Object,System.Data.DataRow)">
            <summary>
            Uses reflection to recursively populate/map class properties that are marked with a <see cref="T:AssetManager.Data.Classes.DataColumnNameAttribute"/>.
            </summary>
            <param name="obj">Object to be populated.</param>
            <param name="row">DataRow with columns matching the <see cref="T:AssetManager.Data.Classes.DataColumnNameAttribute"/> in the objects properties.</param>
        </member>
        <member name="M:AssetManager.Data.Classes.Attachment.#ctor(System.String,AssetManager.Data.AttachmentsBaseCols)">
            <summary>
            Create new Attachment from a file path.
            </summary>
            <param name="newFile">Full path to file.</param>
            <param name="attachTable">The table that will be assigned to this instance.</param>
        </member>
        <member name="T:AssetManager.Data.ParamCollection">
            <summary>
            Wrapper for DBParameter
            </summary>
        </member>
        <member name="T:AssetManager.Data.QueryParamCollection">
            <summary>
            Wrapper for DBQueryParameter
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectHistoricalDeviceEntry(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.HistoricalDevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.HistoricalDevicesCols.HistoryEntryGuid"/> = <paramref name="entryGuid"/>
            </summary>
            <param name="entryGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectDeviceByGuid(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.DevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.DevicesCols.TableName"/> = <paramref name="deviceGuid"/>
            </summary>
            <param name="deviceGuid"></param>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectDevicesTable">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.DevicesCols.TableName"/> ORDER BY <see cref="F:AssetManager.Data.DevicesCols.InputDateTime"/> DESC
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectDevicesByEmpNum(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.DevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.DevicesCols.MunisEmpNum"/> = <paramref name="empNum"/>
            </summary>
            <param name="empNum"></param>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectEmptyHistoricalTable">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.HistoricalDevicesCols.TableName"/> LIMIT 0
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectTrackingByDevGuid(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.TrackablesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.TrackablesCols.DeviceGuid"/> = <paramref name="deviceGuid"/> ORDER BY <see cref="F:AssetManager.Data.TrackablesCols.DateStamp"/> DESC
            </summary>
            <param name="deviceGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectTrackingEntryByGuid(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.TrackablesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.TrackablesCols.Guid"/> = <paramref name="entryGuid"/>
            </summary>
            <param name="entryGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectDeviceHistoricalTable(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.HistoricalDevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.DevicesBaseCols.DeviceGuid"/> = <paramref name="deviceGuid"/> ORDER BY <see cref="F:AssetManager.Data.HistoricalDevicesCols.ActionDateTime"/> DESC
            </summary>
            <param name="deviceGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectDevHistoricalEntriesOlderThan(System.String,System.DateTime)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.HistoricalDevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.DevicesBaseCols.DeviceGuid"/> = <paramref name="deviceGuid"/> AND <see cref="F:AssetManager.Data.HistoricalDevicesCols.ActionDateTime"/> "LESS THAN" <paramref name="startDate"/> ORDER BY <see cref="F:AssetManager.Data.HistoricalDevicesCols.ActionDateTime"/> DESC
            </summary>
            <param name="deviceGuid"></param>
            <param name="startDate"></param>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectDevicesPartial">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.DevicesCols.TableName"/> WHERE
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.DeleteDeviceByGuid(System.String)">
            <summary>
            "DELETE FROM <see cref="F:AssetManager.Data.DevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.DevicesBaseCols.DeviceGuid"/> = <paramref name="deviceGuid"/>
            </summary>
            <param name="deviceGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.DeleteHistoricalEntryByGuid(System.String)">
            <summary>
            "DELETE FROM <see cref="F:AssetManager.Data.HistoricalDevicesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.HistoricalDevicesCols.HistoryEntryGuid"/> = <paramref name="entryGuid"/>
            </summary>
            <param name="entryGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectSibiRequestAndItemByItemGuid(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiRequestItemsCols.TableName"/> INNER JOIN <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> ON <see cref="F:AssetManager.Data.SibiRequestItemsCols.RequestGuid"/> = <see cref="F:AssetManager.Data.SibiRequestCols.Guid"/> WHERE <see cref="F:AssetManager.Data.SibiRequestItemsCols.ItemGuid"/> = <paramref name="itemGuid"/>
            </summary>
            <param name="itemGuid"></param>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectSibiDisplayYears">
            <summary>
            SELECT DISTINCT <see cref="F:AssetManager.Data.SibiRequestCols.DateStamp"/> FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> ORDER BY <see cref="F:AssetManager.Data.SibiRequestCols.DateStamp"/> DESC
            </summary>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectSibiRequestsTable">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> ORDER BY <see cref="F:AssetManager.Data.SibiRequestCols.RequestNumber"/> DESC
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectSibiRequestsByYear(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiRequestCols.DateStamp"/> LIKE '% <paramref name="year"/> %' ORDER BY <see cref="F:AssetManager.Data.SibiRequestCols.RequestNumber"/> DESC
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectSibiRequestsByGuid(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiRequestCols.Guid"/> = <paramref name="requestGuid"/>
            </summary>
            <param name="requestGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectEmptySibiItemsTable(System.String)">
            <summary>
            SELECT <paramref name="columnsValue"/> FROM <see cref="F:AssetManager.Data.SibiRequestItemsCols.TableName"/> LIMIT 0
            </summary>
            <param name="columnsValue"></param>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectEmptySibiRequestTable">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> LIMIT 0
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectSibiRequestItems(System.String,System.String)">
            <summary>
            SELECT <paramref name="columnsValue"/> FROM <see cref="F:AssetManager.Data.SibiRequestItemsCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiRequestItemsCols.RequestGuid"/> = <paramref name="requestGuid"/> ORDER BY <see cref="F:AssetManager.Data.SibiRequestItemsCols.Timestamp"/>
            </summary>
            <param name="columnsValue"></param>
            <param name="requestGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectSibiNotes(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiNotesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiNotesCols.RequestGuid"/> = <paramref name="requestGuid"/> ORDER BY <see cref="F:AssetManager.Data.SibiNotesCols.DateStamp"/> DESC
            </summary>
            <param name="requestGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectNoteByGuid(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SibiNotesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiNotesCols.NoteGuid"/> = <paramref name="noteGuid"/>
            </summary>
            <param name="noteGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.DeleteSibiNote(System.String)">
            <summary>
            DELETE FROM <see cref="F:AssetManager.Data.SibiNotesCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiNotesCols.NoteGuid"/> = <paramref name="noteGuid"/>
            </summary>
            <param name="noteGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.DeleteSibiRequestByGuid(System.String)">
            <summary>
            DELETE FROM <see cref="F:AssetManager.Data.SibiRequestCols.TableName"/> WHERE <see cref="F:AssetManager.Data.SibiRequestCols.Guid"/> = <paramref name="requestGuid"/>
            </summary>
            <param name="requestGuid"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectAttributeCodes(System.String,System.String)">
            <summary>
            SELECT * FROM <paramref name="attribTable"/> LEFT OUTER JOIN munis_codes on <paramref name="attribName"/>.db_value = munis_codes.asset_man_code WHERE type_name ='<paramref name="attribName"/>' ORDER BY <see cref="F:AssetManager.Data.ComboCodesBaseCols.DisplayValue"/>
            </summary>
            <param name="attribTable"></param>
            <param name="attribName"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Communications.Queries.SelectUserByName(System.String)">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.UsersCols.TableName"/> WHERE <see cref="F:AssetManager.Data.UsersCols.UserName"/> = <paramref name="userName"/>
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectUsersTable">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.UsersCols.TableName"/>
            </summary>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectSecurityTable">
            <summary>
            SELECT * FROM <see cref="F:AssetManager.Data.SecurityCols.TableName"/> ORDER BY <see cref="F:AssetManager.Data.SecurityCols.AccessLevel"/>
            </summary>
        </member>
        <member name="P:AssetManager.Data.Communications.Queries.SelectTVApiToken">
            <summary>
            SELECT apitoken FROM teamviewer_info
            </summary>
        </member>
        <member name="M:AssetManager.Data.Communications.MunisComms.GetSqlCommandFromParams(System.String,System.Collections.Generic.List{AssetDatabase.Data.DBQueryParameter})">
            <summary>
            Takes a partial query string without the WHERE operator, and a list of <see cref="T:AssetDatabase.Data.DBQueryParameter"/> and returns a parameterized <see cref="T:System.Data.SqlClient.SqlCommand"/>.
            </summary>
            <param name="partialQuery"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:AssetManager.Data.Communications.NetworkConnection">
            <summary>
            Credit to: http://stackoverflow.com/questions/295538/how-to-provide-user-name-and-password-when-connecting-to-a-network-share
            </summary>
        </member>
        <member name="M:AssetManager.Data.Functions.AssetManagerFunctions.SmartEmployeeSearch(System.String,System.Int32)">
            <summary>
            Searches the database for the best possible match to the specified search name using a Levenshtein distance algorithm.
            </summary>
            <param name="searchName"></param>
            <param name="minSearchDistance"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.AssetManagerFunctions.NarrowResults(System.Collections.Generic.List{AssetManager.Data.Classes.SmartEmpSearchInfo})">
            <summary>
            Reprocesses the search results to obtain a more accurate Levenshtein distance calculation.
            </summary>
            <param name="results"></param>
            <remarks>This is done because the initial calculations are performed against the full length
            of the returned names (First and last name), and the distance between the search string and name string may be inaccurate.</remarks>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.AssetManagerFunctions.FindBestSmartSearchMatch(System.Collections.Generic.List{AssetManager.Data.Classes.SmartEmpSearchInfo})">
            <summary>
            Finds the best match within the results. The item with shortest Levenshtein distance and the longest match length (string length) is preferred.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.AssetManagerFunctions.GetEmpSearchResults(System.String,System.String,System.String,System.String)">
            <summary>
            Queries the database for a list of results that contains the employee name result and computed Levenshtein distance to the search string.
            </summary>
            <param name="tableName"></param>
            <param name="searchEmpName"></param>
            <param name="empNameColumn"></param>
            <param name="empNumColumn"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.FtpFunctions.CheckForPrimaryItem(System.String)">
            <summary>
            Checks if supplied Guid exists in Devices or Sibi tables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.FtpFunctions.ListMissingSQLDirs(System.Collections.Generic.List{AssetManager.Data.Functions.FtpFunctions.AttachScanInfo},System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of SQL entries not found in FTP directory list.
            </summary>
            <param name="sqlFiles"></param>
            <param name="ftpDirs"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.FtpFunctions.ListMissingFTPDirs(System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of FTP dirs that do not have an associated Device or Sibi request.
            </summary>
            <param name="ftpDirs"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.FtpFunctions.ListMissingSQLFiles(System.Collections.Generic.List{AssetManager.Data.Functions.FtpFunctions.AttachScanInfo},System.Collections.Generic.List{AssetManager.Data.Functions.FtpFunctions.AttachScanInfo})">
            <summary>
            Returns list of SQL files not found in FTP file list.
            </summary>
            <param name="sqlFiles"></param>
            <param name="ftpFiles"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.FtpFunctions.ListMissingFTPFiles(System.Collections.Generic.List{AssetManager.Data.Functions.FtpFunctions.AttachScanInfo},System.Collections.Generic.List{AssetManager.Data.Functions.FtpFunctions.AttachScanInfo})">
            <summary>
            Returns list of FTP files not found in SQL file list.
            </summary>
            <param name="sqlFiles"></param>
            <param name="ftpFiles"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.DBCacheFunctions.BuildCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a Sqlite compatible CREATE statement from a MySQL 'SHOW FULL COLUMNS FROM' query result.
            </summary>
            <param name="columnResults"></param>
            <returns></returns>
        </member>
        <member name="T:AssetManager.Data.Functions.ParseType">
            <summary>
            Determines how the parser handles the updating and filling of a control.
            </summary>
        </member>
        <member name="F:AssetManager.Data.Functions.ParseType.DisplayOnly">
            <summary>
            The control is filled only.
            </summary>
        </member>
        <member name="F:AssetManager.Data.Functions.ParseType.UpdateAndDisplay">
            <summary>
            The control is filled and will also be added to Update and Insert tables.
            </summary>
        </member>
        <member name="T:AssetManager.Data.Functions.DBControlInfo">
            <summary>
            Instantiate and assign to <see cref="P:System.Windows.Forms.Control.Tag"/> property to enable DBParsing functions.
            </summary>
        </member>
        <member name="P:AssetManager.Data.Functions.DBControlInfo.AttribIndex">
            <summary>
            Gets or sets the <see cref="T:AssetManager.Data.Classes.DBCode"/> index for <see cref="T:System.Windows.Forms.ComboBox"/> controls.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Functions.DBControlInfo.DataColumn">
            <summary>
            Gets or sets the Database Column used to update and/or populate the assigned control.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Functions.DBControlInfo.ParseType">
            <summary>
            Gets or sets <seealso cref="P:AssetManager.Data.Functions.DBControlInfo.ParseType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:AssetManager.Data.Functions.DBControlInfo.Required">
            <summary>
            Is the Control a required field?
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.#ctor(System.Windows.Forms.Form)">
            <summary>
            Instantiate new instance of <see cref="T:AssetManager.Data.Functions.DBControlParser"/>
            </summary>
            <param name="parentForm">Form that contains controls initiated with <see cref="T:AssetManager.Data.Functions.DBControlInfo"/> </param>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.FillDBFields(System.Data.DataTable,System.Collections.Generic.List{AssetManager.Data.Functions.DBRemappingInfo})">
            <summary>
            Populates all Controls in the ParentForm that have been initiated via <see cref="T:AssetManager.Data.Functions.DBControlInfo"/> with their corresponding column names.
            </summary>
            <param name="data">DataTable that contains the rows and columns associated with the controls.</param>
            <param name="remappingList">List of remapping objects for mapping between different column names.</param>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.GetRemappedColumnName(System.String,System.Collections.Generic.List{AssetManager.Data.Functions.DBRemappingInfo})">
            <summary>
            Get remapped column name for the specified column and remapping info. Returns new column name if a match is found in the map; otherwise, returns the original column name.
            </summary>
            <param name="columnName"></param>
            <param name="mappingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.EnableFieldValidation">
            <summary>
            Instantiates an error provider and sets all required DBControls validation events.
            </summary>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.GetDBControls(System.Windows.Forms.Control,System.Collections.Generic.List{System.Windows.Forms.Control})">
            <summary>
            Recursively collects list of controls initiated with <see cref="T:AssetManager.Data.Functions.DBControlInfo"/> tags within Parent control.
            </summary>
            <param name="parentControl">Parent control. Usually a Form to start from.</param>
            <param name="controlList">Blank List of Control to be filled.</param>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.ReturnInsertTable(System.String)">
            <summary>
            Collects an EMPTY DataTable via a SQL Select statement and adds a new row for SQL Insertion.
            </summary>
            <remarks>
            The SQL SELECT statement should return an EMPTY table. A new row will be added to this table via <see cref="M:AssetManager.Data.Functions.DBControlParser.UpdateDBControlRow(System.Data.DataRow)"/>
            </remarks>
            <param name="selectQry">A SQL Select query string that will return an EMPTY table. Ex: "SELECT * FROM table LIMIT 0"</param>
            <returns>
            Returns a DataTable with a new row added via <see cref="M:AssetManager.Data.Functions.DBControlParser.UpdateDBControlRow(System.Data.DataRow)"/>
            </returns>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.ReturnUpdateTable(System.String)">
            <summary>
            Collects a DataTable via a SQL Select statement and modifies the topmost row with data parsed from <seealso cref="M:AssetManager.Data.Functions.DBControlParser.UpdateDBControlRow(System.Data.DataRow)"/>
            </summary>
            <remarks>
            The SQL SELECT statement should return a single row only. This is will be the table row that you wish to update.
            </remarks>
            <param name="selectQry">A SQL Select query string that will return the table row that is to be updated.</param>
            <returns>
            Returns a DataTable modified by the controls identified by <see cref="M:AssetManager.Data.Functions.DBControlParser.GetDBControls(System.Windows.Forms.Control,System.Collections.Generic.List{System.Windows.Forms.Control})"/>
            </returns>
        </member>
        <member name="M:AssetManager.Data.Functions.DBControlParser.UpdateDBControlRow(System.Data.DataRow)">
            <summary>
            Modifies a DataRow with data parsed from controls collected by <see cref="M:AssetManager.Data.Functions.DBControlParser.GetDBControlValue(System.Windows.Forms.Control)"/>
            </summary>
            <param name="DBRow">DataRow to be modified.</param>
        </member>
        <member name="M:AssetManager.Data.DataConsistency.CleanDBValue(System.String)">
            <summary>
            Trims, removes LF and CR chars and returns a DBNull if string is empty.
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.ChildFormControl.FindFormByType(System.Type)">
            <summary>
            Find a form by its type and returns it if found.
            </summary>
            <param name="formType"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.ChildFormControl.GKUpdaterInstance">
            <summary>
            Returns the current instance of <see cref="T:AssetManager.UserInterface.Forms.GKUpdater.GKUpdaterForm"/>. If one does not exists, creates new instance and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.GridColumnFunctions.ColumnsString(System.Collections.Generic.List{AssetManager.Helpers.GridColumnAttrib})">
            <summary>
            Returns a comma separated string containing the DB columns within a List(Of ColumnStruct). For use in queries.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.MiscExtensions.AddParameterWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Adds a parameter to the command.
            </summary>
            <param name="command">
            The command.
            </param>
            <param name="parameterName">
            Name of the parameter.
            </param>
            <param name="parameterValue">
            The parameter value.
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AssetManager.Helpers.MiscExtensions.TextOrRtf(System.Windows.Forms.RichTextBox,System.String)">
            <summary>
            Sets the Rtf property if Rtf format is detected. Otherwise sets the Text property.
            </summary>
            <param name="richTextBox"></param>
            <param name="text"></param>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.CopyToClipboard(System.Windows.Forms.DataGridView,System.Boolean)">
            <summary>
            Copies current selection to clipboard.
            </summary>
            <param name="grid"></param>
            <param name="includeHeaders">False to exclude column headers. Default: True. </param>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.CopyToGridForm(System.Windows.Forms.DataGridView,AssetManager.UserInterface.CustomControls.ExtendedForm)">
            <summary>
            Sends a copy of this grid to a new <see cref="T:AssetManager.UserInterface.Forms.GridForm"/> instance.
            </summary>
            <param name="grid"></param>
            <param name="parentForm"></param>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.CurrentRowValue(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            Returns the object value of the cell in the current row at the specified column.
            </summary>
            <param name="grid"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.CurrentRowStringValue(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            Returns the string value of the cell in the current row at the specified column.
            </summary>
            <param name="grid"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.ColumnIndex(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            Returns the index for the specified column name.
            </summary>
            <param name="grid"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.Populate(System.Windows.Forms.DataGridView,System.Data.DataTable,System.Collections.Generic.List{AssetManager.Helpers.GridColumnAttrib},System.Boolean)">
            <summary>
            Populates this grid from a <see cref="T:System.Data.DataTable"/> and <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:AssetManager.Helpers.GridColumnAttrib"/>.
            </summary>
            <param name="grid"></param>
            <param name="data"></param>
            <param name="columns">List of <see cref="T:AssetManager.Helpers.GridColumnAttrib"/> used to parse column attributes for type, visibility, caption, etc.</param>
            <param name="forceRawData">True if data will not be recreated into a new datatable that conforms to the columns property. Used for grids that should be directly bound to a datatable. Default: false.</param>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.FastAutoSizeColumns(System.Windows.Forms.DataGridView)">
            <summary>
            Provides much faster column resizing than the built-in AutoResizeColumns method.
            </summary>
            <param name="targetGrid"></param>
        </member>
        <member name="M:AssetManager.Helpers.DataGridViewExtensions.SetComboDropWidth(System.Windows.Forms.DataGridViewComboBoxColumn,System.Drawing.Graphics)">
            <summary>
            Sets the drop down width of the specified <see cref="T:System.Windows.Forms.DataGridViewComboBoxColumn"/> to fit all the drop down items.
            </summary>
            <param name="comboColumn"></param>
            <param name="gfx"></param>
        </member>
        <member name="M:AssetManager.Helpers.Colors.ColorAlphaBlend(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Alpha blend two colors.
            </summary>
            <param name="InColor"></param>
            <param name="BlendColor"></param>
            <returns></returns>
        </member>
        <member name="T:AssetManager.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.AddIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.AddNoteIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.AdminIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.asset_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.AssetManagerIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CascadeIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CheckedBoxGreenIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CheckedBoxIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CheckedBoxRedIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CheckForTVRegistryValue">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CheckOutIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.ChromeIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CloseCancelDeleteIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.CopyIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.DeleteIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.DeleteRedIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.DetailsIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.EditIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.EventIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.Exh_K_01_Asset_Input_Formnew">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.Exh_K_02_Asset_Disposal_Form">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.Exh_K_03_Asset_Transfer_Form">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.fieldErrorIcon_Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.FolderIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.FormIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.GK__UpdateIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.GK_SmallIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.ImportIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.LoadingAni">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.MoneyCircle2Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.O365SquareLogo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.PaperClipIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.PauseIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.PlayIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.RDPIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.RefreshIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.RestartIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.SearchIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.sibi_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.SibiLogo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.TeamViewerIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.Title_Text_Orange">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.TransferArrowsIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.TrashIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:AssetManager.Properties.Resources.UpdateChrome">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="M:AssetManager.Security.SecurityTools.CheckForAccess(System.String)">
            <summary>
            Checks if current user has access to the specified module. Throws a <see cref="T:AssetManager.Security.InvalidAccessException"/> if they do not. 
            </summary>
            <param name="recModule"></param>
        </member>
        <member name="M:AssetManager.StartProgram.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:AssetManager.Tools.ActiveDirectoryWrapper.LoadResults">
            <summary>
            Executes the Active Directory search and populates search results. Returns true if results were found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Tools.ActiveDirectoryWrapper.LoadResultsAsync">
            <summary>
            Asynchronously executes the Active Directory search and populates search results. Returns true if results were found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Tools.ActiveDirectoryWrapper.GetDeviceOU">
            <summary>
            Get the OU path of a domain computer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Tools.ActiveDirectoryWrapper.GetDistinguishedName">
            <summary>
            Queries Active Directory for a hostname and returns the Distinguished Name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Tools.ActiveDirectoryWrapper.ParsePath(System.String)">
            <summary>
            Parses a Distinguished Name string into a shorter more readable string.
            </summary>
            <param name="distName"></param>
            <returns></returns>
        </member>
        <member name="T:AssetManager.Tools.Deployment.NewDeviceDeployment.TaskInfo">
            <summary>
            Container for holding deployment methods and a descriptive name.
            </summary>
        </member>
        <member name="M:AssetManager.Tools.Deployment.NewDeviceDeployment.DeploymentTasks(AssetManager.Data.Classes.Device)">
            <summary>
            List of available deployment methods.
            </summary>
            <param name="targetDevice"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Tools.Deployment.NewDeviceDeployment.ChooseDeployments(AssetManager.Data.Classes.Device)">
            <summary>
            Prompt user for items to be deployed to the device.
            </summary>
            <param name="targetDevice"></param>
        </member>
        <member name="T:AssetManager.Tools.TaskBarNotify">
            <summary>
            Provides flashing window and taskbar support.
            </summary>
        </member>
        <member name="T:AssetManager.Tools.ImageCaching">
            <summary>
             These methods allow me to add a single line after the
             InitializeComponent call in a Forms constructor that will efficiently reassign
             all control images set from the recklessly leaky 'spawn-a-new-instance-of-every-object' - ResourceManager.GetObject method.
             By using a global HashTable to contain and pass out single instances of the images, I can
             reduce memory usage by comical orders of magnitude.
             ResourceManager.GetObject can "Die a prolonged and relentlessly agonizing death."
            </summary>
        </member>
        <member name="M:AssetManager.Tools.ImageCaching.CacheControlImages(System.Object)">
            <summary>
            Controls passed to this method will have all their child Control images replaced with a single centrally cached instance of that image.
            </summary>
            <param name="control">Parent container object containing the controls you wish to have cached images applied to. Typically a Form.</param>
        </member>
        <member name="M:AssetManager.Tools.ImageCaching.ImageCache(System.Object,System.Drawing.Image)">
            <summary>
            This method manages the image cache. Images not found with the corresponding key are added to the cache. Returns a cached image.
            </summary>
            <param name="key">The identifying key for cached image. Can be anything, but a control.name of a frequently duplicated control is a good value.</param>
            <param name="image">The image to be cached.</param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.Tools.ImageCaching.SetToolStripImages(System.Windows.Forms.ToolStripItemCollection)">
            <summary>
            Recursively loops through a toolstrip and replaces any images found with a cached instance.
            </summary>
            <param name="tools"></param>
        </member>
        <member name="M:AssetManager.Tools.ImageCaching.SetControlImage(System.Object)">
            <summary>
            Sets a controls image to a cached instance. Checks the control type and sets the correct image property accordingly.
            </summary>
            <param name="ctl"></param>
        </member>
        <member name="M:AssetManager.Tools.PowerShellWrapper.ExecuteRemotePSScript(System.String,System.Byte[],System.Net.NetworkCredential)">
            <summary>
            Execute the specified PowerShell script on the specified host.
            </summary>
            <param name="hostName">Hostname of the remote computer.</param>
            <param name="scriptValue">PowerShell script as a byte array.</param>
            <param name="credentials">Credentials used when creating the remote runspace.</param>
            <returns>Returns any error messages.</returns>
        </member>
        <member name="T:AssetManager.UserInterface.CustomControls.ExtendedForm">
            <summary>
            Custom form with project specific properties and methods.
            </summary>
        </member>
        <member name="P:AssetManager.UserInterface.CustomControls.ExtendedForm.GridTheme">
            <summary>
            Gets or sets the Grid Theme for the DataGridView controls within the form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AssetManager.UserInterface.CustomControls.ExtendedForm.FormGuid">
            <summary>
            Unique identifying string used to locate specific instances of this form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AssetManager.UserInterface.CustomControls.ExtendedForm.ParentForm">
            <summary>
            Overloads the stock ParentForm property with a read/writable one. And also sets the icon and <seealso cref="P:AssetManager.UserInterface.CustomControls.ExtendedForm.GridTheme"/> from the parent form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.ExtendedForm.RefreshData">
            <summary>
            Override and add code to refresh data from the database.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.LiveBox.ProcessSearch(System.String)">
            <summary>
            Runs the DB query Asynchronously.
            </summary>
            <param name="searchString"></param>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.MunisToolBar.InsertMunisDropDown(AssetManager.UserInterface.CustomControls.OneClickToolStrip,System.Int32)">
            <summary>
            Inserts the MunisToolBar into the specified toolstrip.
            </summary>
            <param name="targetStrip"></param>
            <param name="locationIndex"></param>
        </member>
        <member name="T:AssetManager.UserInterface.CustomControls.OneClickToolStrip">
            <summary>
            Modified Toolstrip that responds to clicks as soon as the parent form is activated. As opposed to requiring two clicks (one to activate, another to focus).
            </summary>
        </member>
        <member name="P:AssetManager.UserInterface.CustomControls.RemoteToolsControl.MaxFailedUntilNotify">
            <summary>
            Gets or sets the number of failed pings required before a <see cref="E:AssetManager.UserInterface.CustomControls.RemoteToolsControl.HostBackOnline"/> event will be fired.
            </summary>
        </member>
        <member name="E:AssetManager.UserInterface.CustomControls.RemoteToolsControl.HostBackOnline">
            <summary>
            Occurs when a successful ping is received after the number of failed pings has exceeded <see cref="P:AssetManager.UserInterface.CustomControls.RemoteToolsControl.MaxFailedUntilNotify"/> 
            </summary>
        </member>
        <member name="F:AssetManager.UserInterface.CustomControls.RemoteToolsControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.RemoteToolsControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.DrawText(System.Drawing.Graphics)">
            <summary>
            Primary text renderer.
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.NewSlideMessage(System.String,AssetManager.UserInterface.CustomControls.SlideDirection,AssetManager.UserInterface.CustomControls.SlideDirection,System.Int32)">
            <summary>
            Adds new message to queue.
            </summary>
            <param name="text">Text to be displayed.</param>
            <param name="slideInDirection">Slide in direction.</param>
            <param name="slideOutDirection">Slide out direction.</param>
            <param name="displayTime">How long (in seconds) the text will be displayed before sliding out. 0 = forever.</param>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.Clear">
            <summary>
            Clears currently displayed and queued messages.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.ToToolStripControl(System.Windows.Forms.Control)">
            <summary>
            Returns a <see cref="T:System.Windows.Forms.ToolStripControlHost"/> of this control for insertion into tool strips/status strips.
            </summary>
            <param name="parentControl">Target strip for this control. For inheriting font and color.</param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.AddMessageToQueue(System.String,AssetManager.UserInterface.CustomControls.SlideDirection,AssetManager.UserInterface.CustomControls.SlideDirection,System.Int32)">
            <summary>
            Adds a new text message to the queue.
            </summary>
            <param name="text"></param>
            <param name="slideInDirection"></param>
            <param name="slideOutDirection"></param>
            <param name="displayTime"></param>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.StartNewSlide(AssetManager.UserInterface.CustomControls.SliderLabel.MessageParameters)">
            <summary>
            Displays the specified text and starts the animation.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.GetTextSize(System.String)">
            <summary>
            Measures the graphical size of the specified text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.Pause(System.Int32)">
            <summary>
            Async pause task.
            </summary>
            <param name="pauseTime"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.ProcessQueue">
            <summary>
            Handles the message queue. Messages are queued until their animation is complete. Messages with a display time of 0 are moved to the slide out animation status, then replaced with the next message when complete.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.SetControlSize(AssetManager.UserInterface.CustomControls.SliderLabel.MessageParameters)">
            <summary>
            If autosize set to true, sets the control size to fit the text.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.StartSlideInAnimation">
            <summary>
            Sets states, current positions and ending positions for a slide-in animation.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.StartSlideOutAnimation">
            <summary>
            Sets states, current positions and ending positions for a slide-out animation.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.Tick(System.Object,System.EventArgs)">
            <summary>
            Timer tick event for animation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.SliderLabel.UpdateTextPosition">
            <summary>
            Primary animation routine. Messages are animated per their current state and specified directions.
            </summary>
        </member>
        <member name="T:AssetManager.UserInterface.CustomControls.SliderLabel.MessageParameters">
            <summary>
            Parameters for messages to be queued.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.CustomControls.WindowList.BuildWindowList(AssetManager.UserInterface.CustomControls.ExtendedForm,System.Windows.Forms.ToolStripItemCollection)">
            <summary>
            Recursively build ToolStripItemCollections of Forms and their Children and add them to the ToolStrip. Making sure to add SibiMain to the top of the list.
            </summary>
            <param name="parentForm">Form to add to ToolStrip.</param>
            <param name="targetMenuItem">Item to add the Form item to.</param>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.GetEmployeeList">
            <summary>
            Pull a complete list of employees from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.BuildTree(AssetManager.UserInterface.Forms.AdminTools.Hierarchy.EmployeeTree,System.Windows.Forms.TreeNode)">
            <summary>
            Recursively builds a node tree from the employee tree.
            </summary>
            <param name="tree"></param>
            <param name="parentNode"></param>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.GetSubordinates(AssetManager.UserInterface.Forms.AdminTools.Hierarchy.Employee,AssetManager.UserInterface.Forms.AdminTools.Hierarchy.EmployeeTree)">
            <summary>
            Recursively searches data for specified employee/supervisor and builds a hierarchy tree.
            </summary>
            <param name="employee"></param>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="T:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.EmployeeTree">
            <summary>
            Employee tree object.
            </summary>
        </member>
        <member name="T:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.Employee">
            <summary>
            Object for storing employee info.
            </summary>
        </member>
        <member name="F:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AdminTools.Hierarchy.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:AssetManager.UserInterface.Forms.AssetManagement.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AssetManagement.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AssetManagement.ViewHistoryForm.GetChangedFields(System.Data.DataTable)">
            <summary>
            Returns a list of controls whose value differs from the previous historical state.
            </summary>
            <param name="currentData"></param>
            <returns></returns>
        </member>
        <member name="F:AssetManager.UserInterface.Forms.AttachmentsForm.ftpUri">
            <summary>
            "ftp://  strServerIP  /attachments/  CurrentDB  /"
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.AttachmentsForm.EndRenameAttachment(System.Int32,System.String)">
            <summary>
            Updates the attachment filename if the new name is different from the current filename.
            </summary>
            <param name="row">Row of the attachment to be renamed.</param>
            <param name="newFilename">New filename for the attachment.</param>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GKProgressControl.GKLogEvent(System.Object,System.EventArgs)">
            <summary>
            Log message event from GKUpdater.  This even can fire very rapidly. So the result is stored in a buffer to be added to the rtbLog control in a more controlled manner.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GKProgressControl.UI_Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Timer that updates the rtbLog control with chunks of data from the log buffer.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GZipCompress.GetGZOriginalFileSize(System.String)">
            <summary>
            Extracts the original filesize of the compressed file.
            </summary>
            <param name="fi">GZip file to handle</param>
            <returns>Size of the compressed file, when its decompressed.</returns>
            <remarks>More information at <a href="http://tools.ietf.org/html/rfc1952">http://tools.ietf.org/html/rfc1952</a> section 2.3</remarks>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GZipCompress.GetGZOriginalFileSize(System.IO.FileInfo)">
            <summary>
            Extracts the original filesize of the compressed file.
            </summary>
            <param name="fi">GZip file to handle</param>
            <returns>Size of the compressed file, when its decompressed.</returns>
            <remarks>More information at <a href="http://tools.ietf.org/html/rfc1952">http://tools.ietf.org/html/rfc1952</a> section 2.3</remarks>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.DownloadPack">
            <summary>
            Creates and cleans the pack file directories then downloads a new pack file from the server location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.VerifyPackFile">
             <summary>
             Verifies directory structure, checks if pack file is present, then compares local and remote hashes of the pack file.
            
             Returns False if directory or file is missing, or if the hashes mismatch.
             </summary>
             <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.GetRemoteHash">
            <summary>
            Returns the contents of the hash text file located in <see cref="F:AssetManager.Paths.GKRemotePackFileDir"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.CopyPackFile(System.String,System.String)">
            <summary>
            Copies a single file to the <paramref name="dest"/> path.
            </summary>
            <param name="source"></param>
            Path of source file.
            <param name="dest"></param>
            Path of destination.
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.CopyFile(System.String,System.String)">
            <summary>
            Performs a buffered file stream transfer.
            </summary>
            <param name="Source"></param>
            <param name="Dest"></param>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.PackGKDir">
            <summary>
            Compresses the local Gatekeeper directory into a new pack file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.UnPackGKDir">
            <summary>
            Decompresses the pack file into a local working directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.UploadPackFiles">
            <summary>
            Copies the pack file and hash file to the server directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.ProcessPackFile">
            <summary>
            Verifies the local pack file and downloads a new one if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.CreateNewPackFile">
            <summary>
            Creates a new pack file and hash file and copies them to the server location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.ManagePackFile.CreateHashFile">
            <summary>
            Creates a text file containing the hash string of the pack file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GKUpdaterForm.CanRunMoreUpdates">
            <summary>
            Returns True if number of running updates is less than the maximum simultaneous allowed updates and RunQueue is True.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GKUpdaterForm.PruneQueue">
            <summary>
            Removes disposed update fragments from list.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GKUpdaterForm.SortUpdates">
            <summary>
            Sorts all the GKProgressControls in order of the <see cref="T:AssetManager.UserInterface.Forms.GKUpdater.GKProgressControl.ProgressStatus"/> enum.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.GKUpdater.GKUpdaterForm.StartNextUpdate">
            <summary>
            Starts the next update that has a queued status.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.Sibi.SibiMainForm.ItemSearch(System.String)">
            <summary>
            Searches all request item columns for item that match the specified search string.
            </summary>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.Sibi.SibiMainForm.GetRowColor(System.String)">
            <summary>
            Gets the color associated with the specified attribute code. Alpha blended with gray to make it more pastel.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:AssetManager.UserInterface.Forms.Sibi.SibiManageRequestForm.MarkupRequestItems(System.Data.DataTable)">
            <summary>
            Cleans up the request items data in prep for DB insertion.
            </summary>
            <param name="itemsData"></param>
        </member>
    </members>
</doc>
